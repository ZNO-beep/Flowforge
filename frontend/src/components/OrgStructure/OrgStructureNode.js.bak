import React, { useState } from 'react';
import { Handle, Position } from 'reactflow';
import { ChevronDown, ChevronRight, Plus, Trash2, Edit, Info } from 'lucide-react';
import { cn } from '../../utils';

/**
 * OrgStructureNode component for rendering department, role, and function nodes
 * in the organizational structure visualization.
 */
const OrgStructureNode = ({ data, isConnectable }) => {
  const { label, description, type, expanded, onToggleExpand, onAddChild, onDelete, onEdit, isLoading, apiId } = data;
  const [showTooltip, setShowTooltip] = useState(false);
  
  // Determine node styling based on type
  const getNodeStyle = () => {
    switch (type) {
      case 'department':
        return 'bg-blue-100 border-blue-500 hover:bg-blue-200';
      case 'role':
        return 'bg-green-100 border-green-500 hover:bg-green-200';
      case 'function':
        return 'bg-amber-100 border-amber-500 hover:bg-amber-200';
      default:
        return 'bg-gray-100 border-gray-500 hover:bg-gray-200';
    }
  };

  // Determine icon and text based on type
  const getTypeInfo = () => {
    switch (type) {
      case 'department':
        return { icon: 'üè¢', text: 'Department' };
      case 'role':
        return { icon: 'üë§', text: 'Role' };
      case 'function':
        return { icon: '‚öôÔ∏è', text: 'Function' };
      default:
        return { icon: 'üìÑ', text: 'Node' };
    }
  };

  const { icon, text } = getTypeInfo();
  const nodeStyle = getNodeStyle();

  return (
    <div className={cn(
      'px-4 py-2 rounded-md border-2 shadow-md min-w-[180px] relative',
      nodeStyle,
      isLoading && 'opacity-70'
    )}>
      {/* Source handle - top */}
      <Handle
        type="source"
        position={Position.Top}
        isConnectable={isConnectable}
        className="w-3 h-3 bg-gray-400"
      />

      {/* Node content */}
      <div className="flex flex-col">
        <div className="flex items-center justify-between mb-1">
          <span className="text-xs text-gray-500 flex items-center gap-1">
            {icon} {text}
          </span>
          <div className="flex items-center gap-1">
            {/* Info button */}
            <button
              onMouseEnter={() => setShowTooltip(true)}
              onMouseLeave={() => setShowTooltip(false)}
              className="p-1 rounded-full hover:bg-gray-200 transition-colors text-gray-500"
              title="Show details"
            >
              <Info className="w-4 h-4" />
            </button>
            
            {/* Only show expand toggle for departments and roles */}
            {(type === 'department' || type === 'role') && (
              <button
                onClick={onToggleExpand}
                className={cn(
                  "p-1 rounded-full hover:bg-gray-200 transition-colors",
                  isLoading && "animate-pulse"
                )}
                disabled={isLoading}
              >
                {isLoading ? (
                  <div className="w-4 h-4 rounded-full border-2 border-t-transparent border-blue-500 animate-spin" />
                ) : expanded ? (
                  <ChevronDown className="w-4 h-4" />
                ) : (
                  <ChevronRight className="w-4 h-4" />
                )}
              </button>
            )}
            
            {/* Add child button */}
            {(type === 'department' || type === 'role') && (
              <button
                onClick={onAddChild}
                className="p-1 rounded-full hover:bg-gray-200 transition-colors"
                title={`Add ${type === 'department' ? 'Role' : 'Function'}`}
                disabled={isLoading}
              >
                <Plus className="w-4 h-4" />
              </button>
            )}
            
            {/* Edit button */}
            {onEdit && (
              <button
                onClick={onEdit}
                className="p-1 rounded-full hover:bg-blue-200 transition-colors text-blue-500"
                title="Edit"
                disabled={isLoading}
              >
                <Edit className="w-4 h-4" />
              </button>
            )}
            
            {/* Delete button */}
            {onDelete && (
              <button
                onClick={onDelete}
                className="p-1 rounded-full hover:bg-red-200 transition-colors text-red-500"
                title="Delete"
                disabled={isLoading}
              >
                <Trash2 className="w-4 h-4" />
              </button>
            )}
          </div>
        </div>
        
        <div className="font-medium text-center py-1">
          {label}
        </div>
        
        {description && (
          <div className="text-xs text-gray-600 text-center mt-1 italic">
            {description.length > 30 ? `${description.substring(0, 30)}...` : description}
          </div>
        )}
        
        {isLoading && (
          <div className="text-xs text-center text-gray-500 italic mt-1">
            Loading...
          </div>
        )}
      </div>

      {/* Tooltip */}
      {showTooltip && (
        <div className="absolute z-10 bg-white p-3 rounded-md shadow-lg border border-gray-200 min-w-[200px] left-full ml-2 top-0">
          <h4 className="font-semibold mb-1">{label}</h4>
          <div className="text-xs mb-2">
            <span className="font-medium">Type:</span> {text}
          </div>
          {description && (
            <div className="text-xs mb-2">
              <span className="font-medium">Description:</span> {description}
            </div>
          )}
          <div className="text-xs mb-2">
            <span className="font-medium">ID:</span> {apiId}
          </div>
          {expanded !== undefined && (
            <div className="text-xs">
              <span className="font-medium">Status:</span> {expanded ? 'Expanded' : 'Collapsed'}
            </div>
          )}
        </div>
      )}

      {/* Target handle - bottom */}
      <Handle
        type="target"
        position={Position.Bottom}
        isConnectable={isConnectable}
        className="w-3 h-3 bg-gray-400"
      />
    </div>
  );
};

export default OrgStructureNode; 